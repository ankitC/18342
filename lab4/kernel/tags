!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIGN	include/asm.h	23;"	d
ALIGN8	include/asm.h	24;"	d
ARG0	include/asm.h	12;"	d
ARG1	include/asm.h	13;"	d
ARG2	include/asm.h	14;"	d
ARG3	include/asm.h	15;"	d
ARG4	include/asm.h	17;"	d
ARG5	include/asm.h	18;"	d
ARG6	include/asm.h	19;"	d
ARG7	include/asm.h	20;"	d
ARM_OBJS	arm/kernel.mk	/^ARM_OBJS := $(ARM_OBJS:%=$(KDIR)\/arm\/%)$/;"	m
ARM_OBJS	arm/kernel.mk	/^ARM_OBJS := reg.o psr.o int_asm.o$/;"	m
BACKSPACE	syscall/io.c	22;"	d	file:
BITS_ERRNO_H	include/bits/errno.h	4;"	d
BITS_FILENO_H	include/bits/fileno.h	10;"	d
BITS_SWI_H	include/bits/swi.h	13;"	d
BSS_WORD32	include/asm.h	34;"	d
C	include/task.h	/^	unsigned long C;           \/**< The worst-case computation time *\/$/;"	m	struct:task
CARRAIGE_RETURN	syscall/io.c	25;"	d	file:
CHAR_BIT	include/types.h	74;"	d
CHAR_MAX	include/types.h	83;"	d
CHAR_MIN	include/types.h	89;"	d
CRASH	include/asm.h	36;"	d
CREATE_SWI	include/bits/swi.h	24;"	d
C_SWI_handler	C_SWI_handler.c	/^void C_SWI_handler(int swino, unsigned* args)$/;"	f
DATA	include/asm.h	32;"	d
DATASYM	include/asm.h	28;"	d
DEBUG	lock/mutex.c	23;"	d	file:
DEBUG_MUTEX	lock/mutex.c	13;"	d	file:
DELETE	syscall/io.c	23;"	d	file:
E2BIG	include/bits/errno.h	12;"	d
EACCES	include/bits/errno.h	18;"	d
EAGAIN	include/bits/errno.h	16;"	d
EBADF	include/bits/errno.h	14;"	d
EBUSY	include/bits/errno.h	21;"	d
ECHILD	include/bits/errno.h	15;"	d
EDEADLOCK	include/bits/errno.h	40;"	d
EDOM	include/bits/errno.h	38;"	d
EEXIST	include/bits/errno.h	22;"	d
EFAULT	include/bits/errno.h	19;"	d
EFBIG	include/bits/errno.h	32;"	d
EINTR	include/bits/errno.h	9;"	d
EINVAL	include/bits/errno.h	27;"	d
EIO	include/bits/errno.h	10;"	d
EISDIR	include/bits/errno.h	26;"	d
EMFILE	include/bits/errno.h	29;"	d
EMLINK	include/bits/errno.h	36;"	d
ENFILE	include/bits/errno.h	28;"	d
ENODEV	include/bits/errno.h	24;"	d
ENOENT	include/bits/errno.h	7;"	d
ENOEXEC	include/bits/errno.h	13;"	d
ENOMEM	include/bits/errno.h	17;"	d
ENOSPC	include/bits/errno.h	33;"	d
ENOTBLK	include/bits/errno.h	20;"	d
ENOTDIR	include/bits/errno.h	25;"	d
ENOTTY	include/bits/errno.h	30;"	d
ENXIO	include/bits/errno.h	11;"	d
EOT	syscall/io.c	21;"	d	file:
EPERM	include/bits/errno.h	6;"	d
EPIPE	include/bits/errno.h	37;"	d
ERANGE	include/bits/errno.h	39;"	d
EROFS	include/bits/errno.h	35;"	d
ESCHED	include/bits/errno.h	42;"	d
ESPIPE	include/bits/errno.h	34;"	d
ESRCH	include/bits/errno.h	8;"	d
ETXTBSY	include/bits/errno.h	31;"	d
EVENT_WAIT	include/bits/swi.h	30;"	d
EXDEV	include/bits/errno.h	23;"	d
EX_DABRT	include/arm/exception.h	18;"	d
EX_FABRT	include/arm/exception.h	17;"	d
EX_FIQ	include/arm/exception.h	20;"	d
EX_IRQ	include/arm/exception.h	19;"	d
EX_RESET	include/arm/exception.h	14;"	d
EX_SWI	include/arm/exception.h	16;"	d
EX_UD	include/arm/exception.h	15;"	d
FALSE	include/types.h	/^	FALSE = 0,$/;"	e	enum:bool_e
FLASH_END_ADDR	include/arm/physmem.h	15;"	d
FLASH_START_ADDR	include/arm/physmem.h	14;"	d
FUNC	include/asm.h	31;"	d
FUNCSYM	include/asm.h	27;"	d
GLOBAL	include/asm.h	25;"	d
HEAP_END	syscall/io.c	32;"	d	file:
HEAP_START	syscall/io.c	31;"	d	file:
IDLE_PRIO	include/config.h	26;"	d
IMPLEMENTATION	arm/psr.c	3;"	d	file:
IMPLEMENTATION	arm/reg.c	3;"	d	file:
IMPLEMENTATION	ctype.c	9;"	d	file:
INLINE	include/inline.h	26;"	d
INLINE	include/inline.h	30;"	d
INLINE	include/inline.h	32;"	d
INT16_MAX	include/types.h	62;"	d
INT16_MIN	include/types.h	66;"	d
INT32_MAX	include/types.h	63;"	d
INT32_MIN	include/types.h	67;"	d
INT64_MAX	include/types.h	64;"	d
INT64_MIN	include/types.h	68;"	d
INT8_MAX	include/types.h	61;"	d
INT8_MIN	include/types.h	65;"	d
INT_AC97	include/arm/interrupt.h	34;"	d
INT_BTUART	include/arm/interrupt.h	40;"	d
INT_DMA	include/arm/interrupt.h	44;"	d
INT_FFUART	include/arm/interrupt.h	41;"	d
INT_GPIO_0	include/arm/interrupt.h	28;"	d
INT_GPIO_1	include/arm/interrupt.h	29;"	d
INT_GPIO_HI	include/arm/interrupt.h	30;"	d
INT_HUART	include/arm/interrupt.h	27;"	d
INT_I2C	include/arm/interrupt.h	37;"	d
INT_I2S	include/arm/interrupt.h	33;"	d
INT_ICCR_ADDR	include/arm/interrupt.h	24;"	d
INT_ICCR_DIM	include/arm/interrupt.h	25;"	d
INT_ICFP_ADDR	include/arm/interrupt.h	21;"	d
INT_ICIP_ADDR	include/arm/interrupt.h	18;"	d
INT_ICLR_ADDR	include/arm/interrupt.h	20;"	d
INT_ICMR_ADDR	include/arm/interrupt.h	19;"	d
INT_ICP	include/arm/interrupt.h	38;"	d
INT_ICPR_ADDR	include/arm/interrupt.h	22;"	d
INT_LCD	include/arm/interrupt.h	36;"	d
INT_MAX	include/types.h	85;"	d
INT_MIN	include/types.h	91;"	d
INT_MMC	include/arm/interrupt.h	42;"	d
INT_NSSP	include/arm/interrupt.h	35;"	d
INT_OSTMR_0	include/arm/interrupt.h	45;"	d
INT_OSTMR_1	include/arm/interrupt.h	46;"	d
INT_OSTMR_2	include/arm/interrupt.h	47;"	d
INT_OSTMR_3	include/arm/interrupt.h	48;"	d
INT_PMU	include/arm/interrupt.h	32;"	d
INT_RESERVED_MASK	include/arm/interrupt.h	52;"	d
INT_RTC_HZ	include/arm/interrupt.h	49;"	d
INT_RTC_MATCH	include/arm/interrupt.h	50;"	d
INT_SSP	include/arm/interrupt.h	43;"	d
INT_STUART	include/arm/interrupt.h	39;"	d
INT_USB	include/arm/interrupt.h	31;"	d
IRQ_STACK_SIZE	include/kernel_helper.h	17;"	d
IRQ_VECTOR_ADDR	include/kernel_helper.h	14;"	d
KERNEL	kernel.mk	/^KERNEL = $(KDIR)\/kernel$/;"	m
KERNEL_H	include/kernel.h	10;"	d
KOBJS	kernel.mk	/^KOBJS := $(KOBJS:%=$(KDIR)\/%)$/;"	m
KOBJS	kernel.mk	/^KOBJS := assert.o main.o math.o memcheck.o raise.o ctype.o hexdump.o device.o timer.o SWI_dispatcher.o C_SWI_handler.o hijack.o prepare_irq_stack.o init.o irq_handler.o$/;"	m
KSTART	kernel.mk	/^KSTART = $(KDIR)\/start.o$/;"	m
LDR_PC_PC_minus_4	include/kernel_helper.h	16;"	d
LLONG_MAX	include/types.h	87;"	d
LLONG_MIN	include/types.h	93;"	d
LOAD_ADDR	include/config.h	16;"	d
LOCK_OBJS	lock/kernel.mk	/^LOCK_OBJS := $(LOCK_OBJS:%=$(KDIR)\/lock\/%)$/;"	m
LOCK_OBJS	lock/kernel.mk	/^LOCK_OBJS := mutex.o$/;"	m
LONG_MAX	include/types.h	86;"	d
LONG_MIN	include/types.h	92;"	d
MUTEX_CREATE	include/bits/swi.h	26;"	d
MUTEX_LOCK	include/bits/swi.h	27;"	d
MUTEX_UNLOCK	include/bits/swi.h	28;"	d
NEW_LINE	syscall/io.c	24;"	d	file:
NUM_DEVICES	include/device.h	16;"	d
NUM_EXCEPTIONS	include/arm/exception.h	21;"	d
NUM_INTERRUPTS	include/arm/interrupt.h	54;"	d
OSTMR_FREQ	include/arm/timer.h	37;"	d
OSTMR_OIER_ADDR	include/arm/timer.h	31;"	d
OSTMR_OIER_E0	include/arm/timer.h	32;"	d
OSTMR_OIER_E1	include/arm/timer.h	33;"	d
OSTMR_OIER_E2	include/arm/timer.h	34;"	d
OSTMR_OIER_E3	include/arm/timer.h	35;"	d
OSTMR_OSCR_ADDR	include/arm/timer.h	20;"	d
OSTMR_OSMR_ADDR	include/arm/timer.h	18;"	d
OSTMR_OSSR_ADDR	include/arm/timer.h	22;"	d
OSTMR_OSSR_M0	include/arm/timer.h	23;"	d
OSTMR_OSSR_M1	include/arm/timer.h	24;"	d
OSTMR_OSSR_M2	include/arm/timer.h	25;"	d
OSTMR_OSSR_M3	include/arm/timer.h	26;"	d
OSTMR_OWER_ADDR	include/arm/timer.h	28;"	d
OSTMR_OWER_WME	include/arm/timer.h	29;"	d
OS_AVAIL_TASKS	include/config.h	28;"	d
OS_KSTACK_SIZE	include/config.h	22;"	d
OS_MAX_TASKS	include/config.h	27;"	d
OS_NUM_MUTEX	include/config.h	31;"	d
OS_TICKS_PER_SEC	include/config.h	13;"	d
OS_TIMER_RESOLUTION	include/config.h	14;"	d
OS_USTACK_ALIGN	include/config.h	23;"	d
PERIPHERAL_BASE	include/arm/reg.h	16;"	d
PSR_CARRY	include/arm/psr.h	16;"	d
PSR_FIQ	include/arm/psr.h	19;"	d
PSR_IRQ	include/arm/psr.h	18;"	d
PSR_MODE	include/arm/psr.h	20;"	d
PSR_MODE_ABT	include/arm/psr.h	26;"	d
PSR_MODE_FIQ	include/arm/psr.h	23;"	d
PSR_MODE_IRQ	include/arm/psr.h	24;"	d
PSR_MODE_SVC	include/arm/psr.h	25;"	d
PSR_MODE_SYS	include/arm/psr.h	28;"	d
PSR_MODE_UND	include/arm/psr.h	27;"	d
PSR_MODE_USR	include/arm/psr.h	22;"	d
PSR_NEG	include/arm/psr.h	14;"	d
PSR_OFLW	include/arm/psr.h	17;"	d
PSR_ZERO	include/arm/psr.h	15;"	d
RAM_END_ADDR	include/arm/physmem.h	17;"	d
RAM_START	syscall/io.c	30;"	d	file:
RAM_START_ADDR	include/arm/physmem.h	16;"	d
READ_SWI	include/bits/swi.h	17;"	d
ROM_END	syscall/io.c	28;"	d	file:
SCHAR_MAX	include/types.h	82;"	d
SCHAR_MIN	include/types.h	88;"	d
SCHED_H	include/sched.h	10;"	d
SCHED_OBJS	sched/kernel.mk	/^SCHED_OBJS := $(SCHED_OBJS:%=$(KDIR)\/sched\/%)$/;"	m
SCHED_OBJS	sched/kernel.mk	/^SCHED_OBJS := sched.o ub_test.o ctx_switch.o ctx_switch_asm.o run_queue.o$/;"	m
SHRT_MAX	include/types.h	84;"	d
SHRT_MIN	include/types.h	90;"	d
SIZE	include/asm.h	29;"	d
SIZE_MAX	include/types.h	70;"	d
SLEEP_SWI	include/bits/swi.h	22;"	d
SSIZE_MAX	include/types.h	71;"	d
SSIZE_MIN	include/types.h	72;"	d
STDARG_H	include/stdarg.h	9;"	d
STDERR_FILENO	include/bits/fileno.h	14;"	d
STDIN_FILENO	include/bits/fileno.h	12;"	d
STDOUT_FILENO	include/bits/fileno.h	13;"	d
SUP_STACK_END	syscall/io.c	29;"	d	file:
SWI_BASE	include/bits/swi.h	15;"	d
SWI_VECTOR_ADDR	include/kernel_helper.h	15;"	d
SWI_dispatcher	SWI_dispatcher.S	/^SWI_dispatcher:$/;"	l
SYSCALL_H	include/syscall.h	10;"	d
SYSCALL_OBJS	syscall/kernel.mk	/^SYSCALL_OBJS := $(SYSCALL_OBJS:%=$(KDIR)\/syscall\/%)$/;"	m
SYSCALL_OBJS	syscall/kernel.mk	/^SYSCALL_OBJS := io.o proc.o time.o$/;"	m
T	include/task.h	/^	unsigned long T;           \/**< The task's period *\/$/;"	m	struct:task
TASK_H	include/task.h	10;"	d
TIME_SWI	include/bits/swi.h	21;"	d
TRUE	include/types.h	/^	TRUE$/;"	e	enum:bool_e
UCHAR_MAX	include/types.h	76;"	d
UINT16_MAX	include/types.h	57;"	d
UINT32_MAX	include/types.h	58;"	d
UINT64_MAX	include/types.h	59;"	d
UINT8_MAX	include/types.h	56;"	d
UINT_MAX	include/types.h	78;"	d
ULLONG_MAX	include/types.h	80;"	d
ULONG_MAX	include/types.h	79;"	d
USHRT_MAX	include/types.h	77;"	d
USR_END_ADDR	include/config.h	20;"	d
USR_MAIN_ADDR	include/kernel_helper.h	13;"	d
USR_STACK	include/config.h	17;"	d
USR_STACK_BASE	include/kernel_helper.h	12;"	d
USR_START_ADDR	include/config.h	19;"	d
WRITE_SWI	include/bits/swi.h	18;"	d
_ASM_H_	include/asm.h	10;"	d
_ASSERT_H_	include/assert.h	10;"	d
_BITS_TYPES_H_	include/types.h	19;"	d
_CONFIG_H_	include/config.h	11;"	d
_CTYPE_H_	include/ctype.h	10;"	d
_DEVICE_H_	include/device.h	14;"	d
_EXCEPTION_H_	include/arm/exception.h	12;"	d
_INTERRUPT_H_	include/arm/interrupt.h	16;"	d
_KERNEL_H	include/kernel_helper.h	10;"	d
_LOCK_H_	include/lock.h	15;"	d
_MATH_H_	include/math.h	11;"	d
_PHYSMEM_H_	include/arm/physmem.h	12;"	d
_PSR_H_	include/arm/psr.h	12;"	d
_REG_H_	include/arm/reg.h	12;"	d
_SCHED_I_H_	sched/sched_i.h	10;"	d
_SWI_H_	include/arm/swi.h	12;"	d
_TIMER_H_	include/arm/timer.h	16;"	d
_start	start.S	/^_start:$/;"	l
allocate_tasks	sched/sched.c	/^void allocate_tasks(task_t** tasks, size_t num_tasks)$/;"	f
assert	include/assert.h	16;"	d
assert	include/assert.h	30;"	d
assign_schedule	sched/ub_test.c	/^int assign_schedule(task_t** tasks  __attribute__((unused)), size_t num_tasks  __attribute__((unused)))$/;"	f
bAvailable	include/lock.h	/^	bool_e	bAvailable;		\/* flag for availability *\/$/;"	m	struct:mutex
bLock	include/lock.h	/^	bool_e	bLock;			\/* 1 for lock\/0 for unlock *\/	$/;"	m	struct:mutex
bool_e	include/types.h	/^typedef enum bool_e$/;"	g
bool_e	include/types.h	/^} bool_e;$/;"	t	typeref:enum:bool_e
cond	include/lock.h	/^struct cond$/;"	s
cond_t	include/lock.h	/^typedef struct cond cond_t;$/;"	t	typeref:struct:cond
context	include/task.h	/^	sched_context_t  context;            \/**< The task's serialized context -- if not running *\/$/;"	m	struct:tcb
crash	include/assert.h	17;"	d
crash	include/assert.h	26;"	d
cur_prio	include/task.h	/^	uint8_t          cur_prio;           \/**< The current priority of the task after priority inheritance *\/$/;"	m	struct:tcb
cur_tcb	sched/ctx_switch.c	/^static tcb_t* cur_tcb; \/* use this if needed *\/$/;"	v	file:
data	include/task.h	/^	void*         data;        \/**< Argument to the root function *\/$/;"	m	struct:task
dev	device.c	/^struct dev$/;"	s	file:
dev_freq	device.c	/^const unsigned long dev_freq[NUM_DEVICES] = {100, 200, 500, 50};$/;"	v
dev_init	device.c	/^void dev_init(void)$/;"	f
dev_t	device.c	/^typedef struct dev dev_t;$/;"	t	typeref:struct:dev	file:
dev_update	device.c	/^void dev_update(unsigned long millis)$/;"	f
dev_wait	device.c	/^void dev_wait(unsigned int dev)$/;"	f
devices	device.c	/^static dev_t devices[NUM_DEVICES];$/;"	v	file:
disable_interrupts	include/arm/exception.h	/^INLINE void disable_interrupts(void)$/;"	f
dispatch_nosave	sched/ctx_switch.c	/^void dispatch_nosave(void)$/;"	f
dispatch_save	sched/ctx_switch.c	/^void dispatch_save(void)$/;"	f
dispatch_sleep	sched/ctx_switch.c	/^void dispatch_sleep(void)$/;"	f
enable_interrupts	include/arm/exception.h	/^INLINE void enable_interrupts(void)$/;"	f
event_wait	syscall/proc.c	/^int event_wait(unsigned int dev)$/;"	f
ex_context	include/arm/exception.h	/^struct ex_context$/;"	s
ex_context_t	include/arm/exception.h	/^typedef struct ex_context ex_context_t;$/;"	t	typeref:struct:ex_context
first_old_irqi	main.c	/^unsigned int first_old_irqi;$/;"	v
first_old_swii	main.c	/^unsigned int first_old_swii;$/;"	v
get_cur_prio	sched/ctx_switch.c	/^uint8_t get_cur_prio(void)$/;"	f
get_cur_tcb	sched/ctx_switch.c	/^tcb_t* get_cur_tcb(void)$/;"	f
global_data	main.c	/^uint32_t global_data;$/;"	v
group_run_bits	sched/run_queue.c	/^static uint8_t group_run_bits;$/;"	v	file:
gtMutex	lock/mutex.c	/^mutex_t gtMutex[OS_NUM_MUTEX];$/;"	v
hexdump	hexdump.c	/^void hexdump(void *buf, size_t len)$/;"	f
highest_prio	sched/run_queue.c	/^uint8_t highest_prio(void)$/;"	f
hijack	hijack.c	/^int hijack(uint32_t vector_addr, uint32_t new_addr, uint32_t* old_addr, \\$/;"	f
holds_lock	include/task.h	/^	int              holds_lock;         \/**< 1 if the task is currently owning a lock *\/$/;"	m	struct:tcb
idle	sched/sched.c	/^static void __attribute__((unused)) idle(void)$/;"	f	file:
ilog2	math.c	/^unsigned int ilog2(unsigned int v)$/;"	f
ilog2	math.c	/^unsigned int ilog2(unsigned int x)$/;"	f
init	init.S	/^init:$/;"	l
init_kern_timer	timer.c	/^void init_kern_timer(void)$/;"	f
int16_t	include/types.h	/^typedef short               int16_t;$/;"	t
int32_t	include/types.h	/^typedef int                 int32_t;$/;"	t
int64_t	include/types.h	/^typedef long long           int64_t;$/;"	t
int8_t	include/types.h	/^typedef char                int8_t;$/;"	t
intptr_t	include/types.h	/^typedef int32_t             intptr_t;$/;"	t
invalid_syscall	syscall/proc.c	/^void invalid_syscall(unsigned int call_num  __attribute__((unused)))$/;"	f
irq_handler	irq_handler.c	/^void irq_handler(void)$/;"	f
irq_init	main.c	/^static void irq_init(void)$/;"	f	file:
irq_stack	main.c	/^char* irq_stack;$/;"	v
isalnum	include/ctype.h	/^INLINE int __attribute__((const)) isalnum(int c) $/;"	f
isalpha	include/ctype.h	/^INLINE int __attribute__((const)) isalpha(int c) $/;"	f
isascii	include/ctype.h	/^INLINE int __attribute__((const)) isascii(int c)$/;"	f
iscntrl	include/ctype.h	/^INLINE int __attribute__((const)) iscntrl(int c) $/;"	f
isdigit	include/ctype.h	/^INLINE int __attribute__((const)) isdigit(int c) $/;"	f
isgraph	include/ctype.h	/^INLINE int __attribute__((const)) isgraph(int c) $/;"	f
islower	include/ctype.h	/^INLINE int __attribute__((const)) islower(int c) $/;"	f
isprint	include/ctype.h	/^INLINE int __attribute__((const)) isprint(int c) $/;"	f
ispunct	include/ctype.h	/^INLINE int __attribute__((const)) ispunct(int c) $/;"	f
isspace	include/ctype.h	/^INLINE int __attribute__((const)) isspace(int c) $/;"	f
isupper	include/ctype.h	/^INLINE int __attribute__((const)) isupper(int c) $/;"	f
isxdigit	include/ctype.h	/^INLINE int __attribute__((const)) isxdigit(int c) $/;"	f
kernelsp	main.c	/^unsigned* kernelsp = 0;$/;"	v
kmain	main.c	/^int kmain(int argc, char** argv, uint32_t table, uint32_t* stackp)$/;"	f
kstack	include/task.h	/^	uint32_t         kstack[OS_KSTACK_SIZE\/sizeof(uint32_t)] $/;"	m	struct:tcb
kstack_high	include/task.h	/^	uint32_t         kstack_high[0];$/;"	m	struct:tcb
lambda	include/task.h	/^	task_fun_t    lambda;      \/**< The root function of this task *\/$/;"	m	struct:task
lr	include/task.h	/^	void*    lr;$/;"	m	struct:sched_context
mutex	include/lock.h	/^struct mutex$/;"	s
mutex_create	lock/mutex.c	/^int mutex_create(void)$/;"	f
mutex_init	lock/mutex.c	/^void mutex_init()$/;"	f
mutex_lock	lock/mutex.c	/^int mutex_lock(int mutex  __attribute__((unused)))$/;"	f
mutex_t	include/lock.h	/^typedef struct mutex mutex_t;$/;"	t	typeref:struct:mutex
mutex_unlock	lock/mutex.c	/^int mutex_unlock(int mutex)$/;"	f
native_prio	include/task.h	/^	uint8_t          native_prio;        \/**< The native priority of the task without escalation *\/$/;"	m	struct:tcb
next_match	device.c	/^	unsigned long   next_match;$/;"	m	struct:dev	file:
null	include/assert.h	12;"	d
null	lock/mutex.c	26;"	d	file:
offsetof	include/types.h	24;"	d
pHolding_Tcb	include/lock.h	/^	tcb_t*	pHolding_Tcb;	\/* who are using this mutex *\/$/;"	m	struct:mutex
pSleep_queue	include/lock.h	/^	tcb_t*	pSleep_queue;	\/* list of applications waiting for this mutex *\/$/;"	m	struct:mutex
panic	assert.c	/^void panic(const char* fmt, ...)$/;"	f
prepare_irq_stack	prepare_irq_stack.S	/^prepare_irq_stack:$/;"	l
prepare_user_stack	main.c	/^static uint32_t* prepare_user_stack(int argc, char** argv)$/;"	f	file:
prio_unmap_table	sched/run_queue.c	/^static uint8_t prio_unmap_table[]  =$/;"	v	file:
r0	include/arm/exception.h	/^	uint32_t r0;$/;"	m	struct:ex_context
r1	include/arm/exception.h	/^	uint32_t r1;$/;"	m	struct:ex_context
r10	include/arm/exception.h	/^	uint32_t r10;$/;"	m	struct:ex_context
r10	include/task.h	/^	uint32_t r10;$/;"	m	struct:sched_context
r11	include/arm/exception.h	/^	uint32_t r11;$/;"	m	struct:ex_context
r11	include/task.h	/^	uint32_t r11;$/;"	m	struct:sched_context
r12	include/arm/exception.h	/^	uint32_t r12;$/;"	m	struct:ex_context
r2	include/arm/exception.h	/^	uint32_t r2;$/;"	m	struct:ex_context
r3	include/arm/exception.h	/^	uint32_t r3;$/;"	m	struct:ex_context
r4	include/arm/exception.h	/^	uint32_t r4;$/;"	m	struct:ex_context
r4	include/task.h	/^	uint32_t r4;$/;"	m	struct:sched_context
r5	include/arm/exception.h	/^	uint32_t r5;$/;"	m	struct:ex_context
r5	include/task.h	/^	uint32_t r5;$/;"	m	struct:sched_context
r6	include/arm/exception.h	/^	uint32_t r6;$/;"	m	struct:ex_context
r6	include/task.h	/^	uint32_t r6;$/;"	m	struct:sched_context
r7	include/arm/exception.h	/^	uint32_t r7;$/;"	m	struct:ex_context
r7	include/task.h	/^	uint32_t r7;$/;"	m	struct:sched_context
r8	include/arm/exception.h	/^	uint32_t r8;$/;"	m	struct:ex_context
r8	include/task.h	/^	uint32_t r8;$/;"	m	struct:sched_context
r9	include/arm/exception.h	/^	uint32_t r9;$/;"	m	struct:ex_context
r9	include/task.h	/^	uint32_t r9;$/;"	m	struct:sched_context
raise	raise.c	/^void raise(void)$/;"	f
read_cpsr	include/arm/psr.h	/^INLINE uint32_t read_cpsr(void)$/;"	f
read_syscall	syscall/io.c	/^ssize_t read_syscall(int fd __attribute__((unused)), void *buff __attribute__((unused)), size_t count __attribute__((unused)))$/;"	f
reg_clear	include/arm/reg.h	/^INLINE void reg_clear(size_t addr, uint32_t flags)$/;"	f
reg_read	include/arm/reg.h	/^INLINE uint32_t reg_read(size_t addr)$/;"	f
reg_set	include/arm/reg.h	/^INLINE void reg_set(size_t addr, uint32_t flags)$/;"	f
reg_write	include/arm/reg.h	/^INLINE void reg_write(size_t addr, uint32_t data)$/;"	f
run_bits	sched/run_queue.c	/^static uint8_t run_bits[OS_MAX_TASKS\/8];$/;"	v	file:
run_list	sched/run_queue.c	/^static tcb_t* run_list[OS_MAX_TASKS];$/;"	v	file:
runqueue_add	sched/run_queue.c	/^void runqueue_add(tcb_t* tcb , uint8_t prio)$/;"	f
runqueue_init	sched/run_queue.c	/^void runqueue_init(void)$/;"	f
runqueue_remove	sched/run_queue.c	/^tcb_t* runqueue_remove(uint8_t prio)$/;"	f
sched_context	include/task.h	/^struct sched_context$/;"	s
sched_context_t	include/task.h	/^typedef volatile struct sched_context sched_context_t;$/;"	t	typeref:struct:sched_context
sched_init	sched/sched.c	/^void sched_init(task_t* main_task  __attribute__((unused)))$/;"	f
second_old_irqi	main.c	/^unsigned int second_old_irqi;$/;"	v
second_old_swii	main.c	/^unsigned int second_old_swii;$/;"	v
size_t	include/types.h	/^typedef unsigned long       size_t;$/;"	t
sleep_queue	device.c	/^	tcb_t* sleep_queue;$/;"	m	struct:dev	file:
sleep_queue	include/task.h	/^	volatile struct tcb* sleep_queue;    \/**< If this task is asleep, this is its sleep queue link *\/$/;"	m	struct:tcb	typeref:struct:tcb::tcb
sleep_syscall	syscall/time.c	/^void sleep_syscall(unsigned long millis  __attribute__((unused)))$/;"	f
sort	syscall/proc.c	/^void sort(task_t* temp, int size)$/;"	f
sp	include/task.h	/^	void*    sp;$/;"	m	struct:sched_context
ssize_t	include/types.h	/^typedef long                ssize_t;$/;"	t
stack_pos	include/task.h	/^	void*         stack_pos;   \/**< The starting position of the task's sp *\/$/;"	m	struct:task
sum_region	math.c	/^unsigned int sum_region(unsigned int* buf, size_t num_words)$/;"	f
system_tcb	sched/sched.c	/^tcb_t system_tcb[OS_MAX_TASKS]; \/* allocate memory for system TCBs *\/$/;"	v
task	include/task.h	/^struct task$/;"	s
task_create	syscall/proc.c	/^int task_create(task_t* tasks  __attribute__((unused)), size_t num_tasks  __attribute__((unused)))$/;"	f
task_fun_t	include/task.h	/^typedef void (*task_fun_t)(void*);$/;"	t
task_t	include/task.h	/^typedef struct task task_t;$/;"	t	typeref:struct:task
tcb	include/task.h	/^struct tcb$/;"	s
tcb_t	include/task.h	/^typedef volatile struct tcb tcb_t;$/;"	t	typeref:struct:tcb
time_syscall	syscall/time.c	/^unsigned long time_syscall(void)$/;"	f
timer_counter	timer.c	/^volatile unsigned long timer_counter = 0;$/;"	v
tolower	include/ctype.h	/^INLINE int __attribute__((const)) tolower(int c) $/;"	f
toupper	include/ctype.h	/^INLINE int __attribute__((const)) toupper(int c) $/;"	f
uint16_t	include/types.h	/^typedef unsigned short      uint16_t;$/;"	t
uint32_t	include/types.h	/^typedef unsigned int        uint32_t;$/;"	t
uint64_t	include/types.h	/^typedef unsigned long long  uint64_t;$/;"	t
uint8_t	include/types.h	/^typedef unsigned char       uint8_t;$/;"	t
uintptr_t	include/types.h	/^typedef uint32_t            uintptr_t;$/;"	t
va_arg	include/stdarg.h	12;"	d
va_copy	include/stdarg.h	14;"	d
va_end	include/stdarg.h	13;"	d
va_list	include/stdarg.h	/^typedef __builtin_va_list va_list;$/;"	t
va_start	include/stdarg.h	11;"	d
valid_addr	memcheck.c	/^int valid_addr(const void* start, size_t count, uintptr_t base, uintptr_t bound)$/;"	f
write_syscall	syscall/io.c	/^ssize_t write_syscall(int fd  __attribute__((unused)), const void *buff  __attribute__((unused)), size_t count  __attribute__((unused)))$/;"	f
